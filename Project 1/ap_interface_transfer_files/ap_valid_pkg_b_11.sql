CREATE OR REPLACE PACKAGE BODY ap_valid_pkg_11
AS
	--Global variable declaration
	g_request_id		NUMBER;
	g_user_id			NUMBER;
	g_org_id			NUMBER;
	g_organization_id	NUMBER;
	g_val_status		VARCHAR2(10) := 'VALIDATED';
	g_err_status		VARCHAR2(10) := 'ERROR';
	g_new_status		VARCHAR2(10) := 'NEW';
	
	--Declare private functions and procedures
	PROCEDURE VALIDATE_CURRENCY_11(in_cur_code FND_CURRENCIES.CURRENCY_CODE%TYPE, out_ret_txt OUT NUMBER);
	FUNCTION GET_VENDORID_11(in_vendor_num AP_SUPPLIERS.SEGMENT1%TYPE) RETURN NUMBER;
	
/*This procedure will add a set of unique lines to ap_invoices_interface referencing single invoices, 
the line items of which are represented by rows that will be inserted into ap_invoice_lines_interface.

This procedure will output two parameter values:
out_errbuf:	This parameter will contain any error messages generated by this procedure
out_retcode:	This parameter will contain the completion status of the procedure
				0: Success
				1: Warning
				2: Error*/ 
PROCEDURE MAIN(out_errbuf OUT NOCOPY VARCHAR2, out_retcode OUT NOCOPY NUMBER) 
IS
	
	--Create header interface cursor			   
	CURSOR c_ap_invoice_header
	IS
	--Select identical column data from the staging table for each unique invoice
	SELECT DISTINCT	  xapis.invoice_type
					, xapis.invoice_num
					, xapis.curr_code
					, xapis.vendor_number
					, xapis.vendor_site
					, xapis.payment_term
					, xapis.header_amount
					, xapis.source
	FROM  ap_invoice_iface_stg_11  xapis
	--Only process data that is new to the staging table
	WHERE UPPER(xapis.record_status) = g_new_status;
	
	--Create line interface cursor that can be dynamically generated for each unique invoice
	CURSOR c_ap_invoice_lines(
		  p_invoice_type	IN VARCHAR2
		, p_invoice_num		IN VARCHAR2
		, p_curr_code		IN VARCHAR2
		, p_vendor_number	IN VARCHAR2
		, p_vendor_site		IN VARCHAR2
		, p_payment_term	IN VARCHAR2
		, p_invoice_amount	IN VARCHAR2
		, p_source			IN VARCHAR2)
	IS
	--Select the data for the invoice line items that match the unique invoice
	SELECT	  xapis.line_number
			, xapis.description
			, xapis.header_amount
			, xapis.line_amount
			, xapis.source
			, xapis.distribution_set_name
	FROM   ap_invoice_iface_stg_11  xapis
	WHERE	xapis.invoice_type		=	p_invoice_type
	AND		xapis.invoice_num		=	p_invoice_num
	AND		xapis.curr_code			=	p_curr_code
	AND		xapis.vendor_number		=	p_vendor_number
	AND		xapis.vendor_site		=	p_vendor_site
	AND		xapis.payment_term		=	p_payment_term
	AND		xapis.header_amount		=	p_invoice_amount
	AND		xapis.source			=	p_source;
	
	--Local Variables
	l_invoice_id			NUMBER;
	l_curr_code				NUMBER;
	l_error_flag			NUMBER := 0;
	l_vendor_id				NUMBER;
	l_ap_line_id			NUMBER;
	l_counter				NUMBER := 0;

BEGIN
	MO_GLOBAL.INIT('PO');
	--Checks the profile information
	MO_GLOBAL.SET_POLICY_CONTEXT('S', FND_PROFILE.VALUE('USER_ID')); 
	FND_FILE.PUT_LINE(FND_FILE.OUTPUT, FND_PROFILE.VALUE('USER_ID'));
	--Creates the unique ID for the concurrent request
	g_request_id		:=	FND_GLOBAL.CONC_REQUEST_ID;
	g_user_id			:=	NVL(FND_PROFILE.VALUE('USER_ID'), -1);
	--204 = Vision Org
	g_org_id			:=	NVL(FND_PROFILE.VALUE('ORG_ID'), 204);
	g_organization_id	:=	TO_NUMBER(OE_PROFILE.VALUE('SO_ORGANIZATION_ID'));
		
	--Transfer the data from the staging table to the interface header
	<<header_loop>>
	FOR i IN c_ap_invoice_header
	LOOP
		l_counter := 0;
		
		--Generate header interface invoice ID from sequence
		SELECT ap_invoices_interface_s.NEXTVAL
		INTO l_invoice_id
		FROM dual;
		FND_FILE.PUT_LINE(FND_FILE.OUTPUT, 'Header ID : ' || l_invoice_id);
		
		--Currency code validation
		BEGIN
			AP_VALID_PKG_11.VALIDATE_CURRENCY_11(i.curr_code, l_curr_code);
			IF l_curr_code = 2 THEN
				FND_FILE.PUT_LINE(FND_FILE.LOG, 'Currency code does not exist' || i.curr_code);
				l_error_flag := 1;
			END IF;
		END;
		
		--Validate and get vendor ID
		l_vendor_id := AP_VALID_PKG_11.GET_VENDORID_11(i.vendor_number);
		
		IF NVL(l_vendor_id, 0) = 0 THEN
			FND_FILE.PUT_LINE(FND_FILE.LOG, 'Vendor number does not exist' || i.vendor_number);
			l_error_flag := 1;
		END IF;
		
		FND_FILE.PUT_LINE(FND_FILE.LOG, 'Error Flag is :-' || l_error_flag);
		
		--If there are no errors, INSERT data into invoice headers table
		IF l_error_flag  = 0 THEN
			FND_FILE.PUT_LINE(FND_FILE.LOG, 'Inserting Data');
			INSERT INTO ap_invoices_interface(
					  invoice_id
					, invoice_type_lookup_code
					, invoice_num
					, invoice_amount
					, settlement_priority
					, payment_currency_code
					, vendor_id
					, vendor_num
					, vendor_site_code
					, org_id
					, created_by
					, creation_date
					, source
					, last_update_login
					, last_updated_by
					, last_update_date)
			VALUES(	  l_invoice_id
					, i.invoice_type
					, i.invoice_num
					, i.header_amount
					, i.payment_term
					, i.curr_code						
					, l_vendor_id
					, i.vendor_number
					, i.vendor_site	
					, g_org_id
					, g_user_id
					, SYSDATE
					, i.source
					, g_user_id
					, g_user_id
					, SYSDATE);
		END IF;
		
		--INSERT invoice line items into lines interface table
		<<lines_loop>>
		FOR j IN c_ap_invoice_lines(
			  p_invoice_type	=>	i.invoice_type
			, p_invoice_num		=>	i.invoice_num
			, p_curr_code		=>	i.curr_code
			, p_vendor_number	=>	i.vendor_number
			, p_vendor_site		=>	i.vendor_site	
			, p_payment_term	=>	i.payment_term
			, p_invoice_amount	=>	i.header_amount
			, p_source			=>	i.source)
		LOOP
			--Generate unique line id for each row from sequence
			SELECT ap_invoice_lines_interface_s.NEXTVAL
			INTO l_ap_line_id
			FROM DUAL;
			
			l_counter := l_counter + 1;
			
			INSERT INTO ap_invoice_lines_interface(
					  invoice_id
					, invoice_line_id
					, line_number
					, description
					, amount
					, distribution_set_name
					, org_id
					, created_by
					, creation_date				
					, last_update_login
					, last_updated_by
					, last_update_date)
			VALUES(	  l_invoice_id
					, l_ap_line_id
					, j.line_number
					, j.description
					, j.line_amount
					, j.distribution_set_name
					, g_org_id
					, g_user_id						
					, SYSDATE						
					, g_user_id
					, g_user_id
					, SYSDATE);
		END LOOP lines_loop;

	END LOOP header_loop;
	
	--Update the record status in the staging table to indicate the successful transfer of data
	UPDATE ap_invoice_iface_stg_11
	SET record_status = 'PROCESSED'
	WHERE record_status LIKE 'NEW';
	
	COMMIT;
END MAIN;

--------------------------------------------------------------------------------------------------

/*This procedure queries the internal database to confirm the validity of the provided currency code
It has one input and one output parameter:
	in_cur_code: The currency code you are attempting to validate
	out_ret_txt: Numerical code indicating the validity of the provided code
					1 = valid
					2 = not valid*/
PROCEDURE VALIDATE_CURRENCY_11(in_cur_code FND_CURRENCIES.CURRENCY_CODE%TYPE, out_ret_txt OUT NUMBER)
IS
	CURSOR c_vld_curr(p_cur_code VARCHAR2)
	IS
    SELECT currency_code 
    FROM   fnd_currencies 
    WHERE  currency_code = p_cur_code;
	
    l_curr_code FND_CURRENCIES.CURRENCY_CODE%TYPE;
    
BEGIN
	OPEN c_vld_curr(in_cur_code);
	
	FETCH c_vld_curr INTO l_curr_code;
	
	IF c_vld_curr%notfound THEN
		out_ret_txt := 2;
	ELSE
		out_ret_txt := 1;
	END IF;
	
	CLOSE c_vld_curr;

EXCEPTION
	WHEN too_many_rows THEN
		out_ret_txt := 2;
	
	WHEN OTHERS THEN
		out_ret_txt := 2;

END VALIDATE_CURRENCY_11;


--This function takes in a single parameter, the vendor number, and returns the vendor ID
FUNCTION GET_VENDORID_11(in_vendor_num AP_SUPPLIERS.SEGMENT1%TYPE)
RETURN NUMBER 
IS
	CURSOR c_vendor_id 
	IS
	SELECT vendor_id 
	FROM   ap_suppliers 
	WHERE  segment1 = in_vendor_num;
	
	out_vendor_id AP_SUPPLIERS.VENDOR_ID%TYPE;
	
BEGIN
	FOR i IN c_vendor_id
	LOOP
		out_vendor_id := i.vendor_id;
	END LOOP;

RETURN(out_vendor_id);
END GET_VENDORID_11;

END ap_valid_pkg_11;